//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Poco
{
    public partial class Notification
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual System.DateTime Date
        {
            get;
            set;
        }
    
        public virtual bool Fait
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual TypeNotification TypeNotification
        {
            get { return _typeNotification; }
            set
            {
                if (!ReferenceEquals(_typeNotification, value))
                {
                    var previousValue = _typeNotification;
                    _typeNotification = value;
                    FixupTypeNotification(previousValue);
                }
            }
        }
        private TypeNotification _typeNotification;
    
        public virtual ICollection<Commande> Commande
        {
            get
            {
                if (_commande == null)
                {
                    var newCollection = new FixupCollection<Commande>();
                    newCollection.CollectionChanged += FixupCommande;
                    _commande = newCollection;
                }
                return _commande;
            }
            set
            {
                if (!ReferenceEquals(_commande, value))
                {
                    var previousValue = _commande as FixupCollection<Commande>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommande;
                    }
                    _commande = value;
                    var newValue = value as FixupCollection<Commande>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommande;
                    }
                }
            }
        }
        private ICollection<Commande> _commande;

        #endregion
        #region Association Fixup
    
        private void FixupTypeNotification(TypeNotification previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Notification, this))
            {
                previousValue.Notification = null;
            }
    
            if (TypeNotification != null)
            {
                TypeNotification.Notification = this;
            }
        }
    
        private void FixupCommande(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Commande item in e.NewItems)
                {
                    if (!item.Notification.Contains(this))
                    {
                        item.Notification.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Commande item in e.OldItems)
                {
                    if (item.Notification.Contains(this))
                    {
                        item.Notification.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
