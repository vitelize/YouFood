//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Poco
{
    public partial class Carte
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string Nom
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateCreation
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateDerniereApplication
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateProchaineApplication
        {
            get;
            set;
        }
    
        public virtual int SpecialiteID
        {
            get { return _specialiteID; }
            set
            {
                if (_specialiteID != value)
                {
                    if (Specialite != null && Specialite.ID != value)
                    {
                        Specialite = null;
                    }
                    _specialiteID = value;
                }
            }
        }
        private int _specialiteID;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Plat> Plat
        {
            get
            {
                if (_plat == null)
                {
                    var newCollection = new FixupCollection<Plat>();
                    newCollection.CollectionChanged += FixupPlat;
                    _plat = newCollection;
                }
                return _plat;
            }
            set
            {
                if (!ReferenceEquals(_plat, value))
                {
                    var previousValue = _plat as FixupCollection<Plat>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlat;
                    }
                    _plat = value;
                    var newValue = value as FixupCollection<Plat>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlat;
                    }
                }
            }
        }
        private ICollection<Plat> _plat;
    
        public virtual Specialite Specialite
        {
            get { return _specialite; }
            set
            {
                if (!ReferenceEquals(_specialite, value))
                {
                    var previousValue = _specialite;
                    _specialite = value;
                    FixupSpecialite(previousValue);
                }
            }
        }
        private Specialite _specialite;

        #endregion
        #region Association Fixup
    
        private void FixupSpecialite(Specialite previousValue)
        {
            if (previousValue != null && previousValue.Carte.Contains(this))
            {
                previousValue.Carte.Remove(this);
            }
    
            if (Specialite != null)
            {
                if (!Specialite.Carte.Contains(this))
                {
                    Specialite.Carte.Add(this);
                }
                if (SpecialiteID != Specialite.ID)
                {
                    SpecialiteID = Specialite.ID;
                }
            }
        }
    
        private void FixupPlat(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Plat item in e.NewItems)
                {
                    if (!item.Carte.Contains(this))
                    {
                        item.Carte.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Plat item in e.OldItems)
                {
                    if (item.Carte.Contains(this))
                    {
                        item.Carte.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
