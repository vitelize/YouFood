//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Poco
{
    public partial class Table
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string Capacite
        {
            get;
            set;
        }
    
        public virtual int Numero
        {
            get;
            set;
        }
    
        public virtual int ZoneID
        {
            get { return _zoneID; }
            set
            {
                if (_zoneID != value)
                {
                    if (Zone != null && Zone.ID != value)
                    {
                        Zone = null;
                    }
                    _zoneID = value;
                }
            }
        }
        private int _zoneID;

        #endregion
        #region Navigation Properties
    
        public virtual Zone Zone
        {
            get { return _zone; }
            set
            {
                if (!ReferenceEquals(_zone, value))
                {
                    var previousValue = _zone;
                    _zone = value;
                    FixupZone(previousValue);
                }
            }
        }
        private Zone _zone;
    
        public virtual ICollection<Commande> Commande
        {
            get
            {
                if (_commande == null)
                {
                    var newCollection = new FixupCollection<Commande>();
                    newCollection.CollectionChanged += FixupCommande;
                    _commande = newCollection;
                }
                return _commande;
            }
            set
            {
                if (!ReferenceEquals(_commande, value))
                {
                    var previousValue = _commande as FixupCollection<Commande>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommande;
                    }
                    _commande = value;
                    var newValue = value as FixupCollection<Commande>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommande;
                    }
                }
            }
        }
        private ICollection<Commande> _commande;

        #endregion
        #region Association Fixup
    
        private void FixupZone(Zone previousValue)
        {
            if (previousValue != null && previousValue.Table.Contains(this))
            {
                previousValue.Table.Remove(this);
            }
    
            if (Zone != null)
            {
                if (!Zone.Table.Contains(this))
                {
                    Zone.Table.Add(this);
                }
                if (ZoneID != Zone.ID)
                {
                    ZoneID = Zone.ID;
                }
            }
        }
    
        private void FixupCommande(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Commande item in e.NewItems)
                {
                    item.Table = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Commande item in e.OldItems)
                {
                    if (ReferenceEquals(item.Table, this))
                    {
                        item.Table = null;
                    }
                }
            }
        }

        #endregion
    }
}
