//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Poco
{
    public partial class Restaurant
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string Adresse
        {
            get;
            set;
        }
    
        public virtual int Capacite
        {
            get;
            set;
        }
    
        public virtual string Tel
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Zone> Zone
        {
            get
            {
                if (_zone == null)
                {
                    var newCollection = new FixupCollection<Zone>();
                    newCollection.CollectionChanged += FixupZone;
                    _zone = newCollection;
                }
                return _zone;
            }
            set
            {
                if (!ReferenceEquals(_zone, value))
                {
                    var previousValue = _zone as FixupCollection<Zone>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupZone;
                    }
                    _zone = value;
                    var newValue = value as FixupCollection<Zone>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupZone;
                    }
                }
            }
        }
        private ICollection<Zone> _zone;
    
        public virtual Manager Manager
        {
            get { return _manager; }
            set
            {
                if (!ReferenceEquals(_manager, value))
                {
                    var previousValue = _manager;
                    _manager = value;
                    FixupManager(previousValue);
                }
            }
        }
        private Manager _manager;

        #endregion
        #region Association Fixup
    
        private void FixupManager(Manager previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Restaurant, this))
            {
                previousValue.Restaurant = null;
            }
    
            if (Manager != null)
            {
                Manager.Restaurant = this;
            }
        }
    
        private void FixupZone(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Zone item in e.NewItems)
                {
                    item.Restaurant = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Zone item in e.OldItems)
                {
                    if (ReferenceEquals(item.Restaurant, this))
                    {
                        item.Restaurant = null;
                    }
                }
            }
        }

        #endregion
    }
}
